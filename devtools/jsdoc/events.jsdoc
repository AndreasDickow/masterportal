/** -------------------- ALERTING -------------------- */

/**
 * @event AlertingModel#change:position
 * @param {Backbone/Model} model The model whose attribute hat changed.
 * @param {Boolean} value The attribute value that has changed.
 * @description Triggered when Model attribute position has changed.
 */

/**
 * @event AlertingModel#render
 * @description Triggered when View has to render.
 */

/**
 * @event AlertingModel#removeAll
 * @description Triggered when View has to remove all alerts.
 */

/**
 * @event AlertingModel#RadioTriggerAlertAlert
 * @param {String/Object} alert The alert object or string needed to create the alert.
 * @description Radio.trigger("Alert", "alert", alert)
 */

/**
 * @event AlertingModel#RadioTriggerAlertAlertRemove
 * @description Radio.trigger("Alert", "alert:remove")
 */

/**
 * @event AlertingView#RadioTriggerAlertClosed
 * @param {String} id The id of the alert that has been closed.
 * @description Radio.trigger("Alert", "closed", id)
 */

/**
 * @event AlertingView#RadioTriggerAlertConfirmed
 * @param {String} id The id of the alert that has been confirmed.
 * @description Radio.trigger("Alert", "confirmed", id)
 */


/** -------------------- CLICK COUNTER -------------------- */

/**
 * @event ClickCounterView#RadioTriggerClickCounterToolChanged
 * @description Radio.trigger("ClickCounter", "toolChanged")
*/

/**
 * @event ClickCounterView#RadioTriggerClickCounterCalcRoute
 * @description Radio.trigger("ClickCounter", "calcRoute")
*/

/**
 * @event ClickCounterView#RadioTriggerClickCounterZoomChanged
 * @description Radio.trigger("ClickCounter", "zoomChanged")
*/

/**
 * @event ClickCounterView#RadioTriggerClickCounterLayerVisibleChanged
 * @description Radio.trigger("ClickCounter", "layerVisibleChanged")
*/

/**
 * @event ClickCounterView#RadioTriggerClickCounterGfi
 * @description Radio.trigger("ClickCounter", "gfi")
*/


/** -------------------- LAYER -------------------- */

/**
 * @event Layer#changeIsSelected
 * @param {Backbone.Model} model The model whose attribute hat changed.
 * @param {Boolean} value The attribute value that has changed.
 * @description Fired if attribute isSelected has changed
 */

/**
 * @event Layer#changeIsVisibleInMap
 * @param {Backbone.Model} model The model whose attribute hat changed.
 * @param {Boolean} value The attribute value that has changed.
 * @description Fired if attribute isVisibleInMap has changed
 */

/**
 * @event Layer#changeTransparency
 * @param {Backbone.Model} model The model whose attribute hat changed.
 * @param {Boolean} value The attribute value that has changed.
 * @description Fired if attribute transparency has changed
 */

/**
 * @event Layer#RadioTriggerLayerUpdateLayerInfo
 * @param {String} name The name of the layer.
 * @description Radio.trigger("Layer", "updateLayerInfo", name)
 */

/**
 * @event Layer#RadioTriggerLayerSetLayerInfoChecked
 * @param {Boolean} value Flag that signs that the layer informations has been checked.
 * @description Radio.trigger("Layer", "setLayerInfoChecked", value)
 */

/**
 * @event Layer#RadioTriggerLayerFeaturesLoaded
 * @param {String} id Id of vector layer.
 * @param {ol/Feature[]} features Features that have been loaded.
 * @description Radio.trigger("Layer", "featuresLoaded", id, features)
 */


/** -------------------- MAP -------------------- */

/**
 * @event Map#RadioTriggerMapChange
 * @description Event that gets fired when the map mode ("2D" / "3D") has changed
 * @param {String} mode Mode of the map.
 * @description Radio.trigger("Map", "changed", mode)
 */

/**
 * @event Map#RadioTriggerMapAddLayerToIndex
 * @description Adds layer to given index
 * @param {Array} array Array consisting of the ol/layer and the given index. [layer, index]
 * @description Radio.trigger("Map", "addLayerToIndex", array)
 */


/** -------------------- MAP VIEW -------------------- */

/**
 * @event MapView#RadioTriggerMapViewChangedOptions
 * @description Event that gets fired when the map view options have changed. The options are scale, center, zoomLevel
 * @param {Object} options Options of mapview status
 * @description Radio.trigger("MapView", "changedOptions", options)
 */

/**
 * @event MapView#RadioRequestMapViewGetResoByScale
 * @description Event that gets the resolution depending on the map scale
 * @param {String} scale Options of mapview status
 * @description Radio.trigger("MapView", "getResoByScale", scale)
 */


/** -------------------- LAYER INFORMATION -------------------- */

/**
 * @event LayerInformation#RadioTriggerLayerInformationAdd
 * @param {Object} options Options of mapview status
 * @description Radio.trigger("LayerInformation", "add", options)
 */
